version: '3'

# @todo allow these to be overridden or document them as required folder
# structures. See also config/phpstan.neon
vars:
  YAML_DIRS: 'web/**/*.yml'
  TWIG_DIRS: 'web/modules web/profiles web/themes'
  # These directories are configured in phpcs.xml. However, phpcs will fail if
  # those directories do not exist, so we create them with the assumption that
  # every Drupal site will eventually have these directories.
  TEST_DIRS: 'web/modules/custom web/themes/custom web/sites'
  NIGHTWATCH_TEST_DIRS: 'test'
  FUNC_ENSURE_DIRS: |
    DIRS_ARR=({{.TEST_DIRS}})
    for DIR in "${DIRS_ARR[@]}"; do
      mkdir -p $DIR
    done

tasks:
  static:
    desc: Runs all static tests
    deps: [security, lint, phpstan, phpunit, phpcs]
  functional:
    desc: Runs all tests that require a bootstrapped Drupal site
    deps: [config, nightwatch]
  security:
    desc: Runs security checks for composer packages and Drupal contrib
    cmds:
      - cmd: |
          if [ "{{.format}}" == "junit" ]; then
            mkdir -p test_result
            ./vendor/bin/local-php-security-checker --format=json > test_result/local-php-security-checker.json
          fi
        ignore_error: true
      - |
        if [ "{{.format}}" == "junit" ]; then
          RESULT=$(cat test_result/local-php-security-checker.json)
          ./vendor/bin/drainpipe-convert-to-junit-xml convert:sensiolabs-security-check "$RESULT" > test_result/local-php-security-checker.xml
          if [ "$RESULT" != "{}" ]; then
            exit 1
          fi
        else
          ./vendor/bin/local-php-security-checker
        fi
      # JUnit output blocked on https://github.com/drush-ops/drush/issues/4817
      - ./vendor/bin/drush pm:security
  lint:
    desc: Runs lint on composer, YAML, and Twig files
    # @todo JUnit output
    cmds:
      - composer validate
      - |
        DIRS_ARR=({{.YAML_DIRS}})
        for DIR in "${DIRS_ARR[@]}"; do
          ./vendor/bin/yaml-lint $DIR
        done
      - |
        DIRS_ARR=({{.TWIG_DIRS}})
        for DIR in "${DIRS_ARR[@]}"; do
          ./vendor/bin/drainpipe-twig-linter lint $DIR
        done
  config:
    desc: Verifies that exported config matches the config in Drupal
    # @todo JUnit output
    cmds:
      - if [ $(./vendor/bin/drush config:status --format=string | wc -w) -gt 0 ]; then echo "Config export does not match"; ./vendor/bin/drush config:status; exit 1; fi
  phpstan:
    dec: Runs PHPStan with mglaman/phpstan-drupal
    cmds:
      - |
        if [ "{{.format}}" == "junit" ]; then
          mkdir -p test_result
          ./vendor/bin/phpstan analyse -c vendor/lullabot/drainpipe-dev/config/phpstan.neon --error-format=junit {{.TEST_DIRS}} > test_result/phpstan.xml
        else
          ./vendor/bin/phpstan analyse -c vendor/lullabot/drainpipe-dev/config/phpstan.neon {{.TEST_DIRS}}
        fi
  phpunit:
    desc: Runs PHPUnit
    cmds:
      - |
        {{ .FUNC_ENSURE_DIRS }}
      - |
        if [ "{{.format}}" == "junit" ]; then
          mkdir -p test_result
          ./vendor/bin/phpunit --log-junit test_result/phpunit.xml {{.TEST_DIRS}}
        else
          ./vendor/bin/phpunit {{.TEST_DIRS}}
        fi
  phpcs:
    desc: Runs PHPCS with Drupal Coding Standards
    summary: |
      Check your code against Drupal's coding standards. To override the default
      ruleset, copy vendor/lullabot/drainpipe-dev/config/phpcs.xml to phpcs.xml
      in the root of your project and edit as needed.
    cmds:
      - |
        {{ .FUNC_ENSURE_DIRS }}
        if [ "{{.format}}" == "junit" ]; then
          mkdir -p test_result
          ./vendor/bin/phpcs --report=junit -q {{.TEST_DIRS}} > test_result/phpcs.xml
        else
          ./vendor/bin/phpcs {{.TEST_DIRS}}
        fi
  autofix:
    desc: Runs PHPCBF with Drupal Coding Standards to fix PHPCS violations
    cmds:
      - |
        {{ .FUNC_ENSURE_DIRS }}
      - ./vendor/bin/phpcs --config-set installed_paths vendor/drupal/coder/coder_sniffer
      - ./vendor/bin/phpcbf --standard=vendor/lullabot/drainpipe-dev/config/phpcs.xml {{.TEST_DIRS}}
  nightwatch:
    desc: Runs Nighwatch functional browser tests
    env:
      NIGHTWATCH_ENV: 'firefox,chrome'
    cmds:
      - yarn
      - yarn nightwatch --env $NIGHTWATCH_ENV {{.CLI_ARGS}}
